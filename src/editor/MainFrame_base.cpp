///////////////////////////////////////////////////////////////////////////// C++ code generated with wxFormBuilder (version Sep 12 2010)// http://www.wxformbuilder.org///// PLEASE DO "NOT" EDIT THIS FILE!///////////////////////////////////////////////////////////////////////////#include "wxSpinPropGrid.h"#include "wxSpinTreeCtrl.h"#include "MainFrame_base.h"///////////////////////////////////////////////////////////////////////////using namespace spineditor;MainFrame_base::MainFrame_base( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxFrame( parent, id, title, pos, size, style ){	this->SetSizeHints( wxDefaultSize, wxDefaultSize );		wxBoxSizer* mainSizer;	mainSizer = new wxBoxSizer( wxVERTICAL );		mainSplitter = new wxSplitterWindow( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSP_3D );	mainSplitter->Connect( wxEVT_IDLE, wxIdleEventHandler( MainFrame_base::mainSplitterOnIdle ), NULL, this );		upperPanel = new wxPanel( mainSplitter, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );	wxFlexGridSizer* upperPanelSizer;	upperPanelSizer = new wxFlexGridSizer( 1, 2, 0, 0 );	upperPanelSizer->AddGrowableCol( 0 );	upperPanelSizer->AddGrowableCol( 1 );	upperPanelSizer->AddGrowableRow( 0 );	upperPanelSizer->SetFlexibleDirection( wxBOTH );	upperPanelSizer->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );		spinTreeCtrl = new wxSpinTreeCtrl( upperPanel, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTR_DEFAULT_STYLE|wxALWAYS_SHOW_SB|wxHSCROLL|wxVSCROLL );	upperPanelSizer->Add( spinTreeCtrl, 1, wxEXPAND, 5 );		spinPropGrid = new wxSpinPropGrid( upperPanel, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );	upperPanelSizer->Add( spinPropGrid, 1, wxEXPAND | wxALL, 5 );		upperPanel->SetSizer( upperPanelSizer );	upperPanel->Layout();	upperPanelSizer->Fit( upperPanel );	lowerPanel = new wxPanel( mainSplitter, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );	wxBoxSizer* lowerPanelSizer;	lowerPanelSizer = new wxBoxSizer( wxVERTICAL );		m_toolBar2 = new wxToolBar( lowerPanel, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTB_FLAT|wxTB_HORIZONTAL );	m_toolBar2->SetToolBitmapSize( wxSize( 16,16 ) );	m_toolBar2->AddTool( wxID_TOOLBAR_CLEARLOG, _("tool"), wxBitmap( wxT("../Resources/images/icon_eraser_16x16.png"), wxBITMAP_TYPE_ANY ), wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString ); 	m_toolBar2->AddTool( wxID_TOOLBAR_SAVELOG, _("tool"), wxBitmap( wxT("../Resources/images/icon_toolbar_save_16x16.png"), wxBITMAP_TYPE_ANY ), wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString ); 	m_toolBar2->AddTool( wxID_TOOLBAR_DEBUG, _("Debug Print: Scene"), wxBitmap( wxT("../Resources/images/icon_toolbar_properties_16x16.png"), wxBITMAP_TYPE_ANY ), wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString ); 	m_toolBar2->Realize();		lowerPanelSizer->Add( m_toolBar2, 0, wxEXPAND, 5 );		logScrolledWindow = new wxScrolledWindow( lowerPanel, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxHSCROLL|wxVSCROLL );	logScrolledWindow->SetScrollRate( 5, 5 );	wxBoxSizer* logSizer;	logSizer = new wxBoxSizer( wxVERTICAL );		logTextCtrl = new wxTextCtrl( logScrolledWindow, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxHSCROLL|wxTE_MULTILINE|wxTE_READONLY );	logTextCtrl->SetFont( wxFont( 10, 70, 90, 90, false, wxEmptyString ) );		logSizer->Add( logTextCtrl, 1, wxEXPAND, 5 );		logScrolledWindow->SetSizer( logSizer );	logScrolledWindow->Layout();	logSizer->Fit( logScrolledWindow );	lowerPanelSizer->Add( logScrolledWindow, 1, wxEXPAND, 5 );		lowerPanel->SetSizer( lowerPanelSizer );	lowerPanel->Layout();	lowerPanelSizer->Fit( lowerPanel );	mainSplitter->SplitHorizontally( upperPanel, lowerPanel, 0 );	mainSizer->Add( mainSplitter, 1, wxEXPAND, 5 );		this->SetSizer( mainSizer );	this->Layout();	m_toolBar1 = this->CreateToolBar( wxTB_HORIZONTAL, wxID_ANY );	m_toolBar1->SetToolBitmapSize( wxSize( 32,32 ) );	m_toolBar1->AddTool( wxID_TOOLBAR_ADD, _("New Node"), wxBitmap( wxT("../Resources/images/icon_toolbar_add.png"), wxBITMAP_TYPE_ANY ), wxNullBitmap, wxITEM_NORMAL, _("Create a new node"), wxEmptyString ); 	m_toolBar1->AddTool( wxID_TOOLBAR_DELETE, _("Delete"), wxBitmap( wxT("../Resources/images/icon_toolbar_delete.png"), wxBITMAP_TYPE_ANY ), wxNullBitmap, wxITEM_NORMAL, _("Delete node"), wxEmptyString ); 	m_toolBar1->AddTool( wxID_TOOLBAR_REFRESH, _("Refresh"), wxBitmap( wxT("../Resources/images/icon_toolbar_refresh.png"), wxBITMAP_TYPE_ANY ), wxNullBitmap, wxITEM_NORMAL, _("Ask server for refresh"), wxEmptyString ); 	m_toolBar1->AddSeparator(); 	m_toolBar1->AddTool( wxID_TOOLBAR_GRID, _("Grid"), wxBitmap( wxT("../Resources/images/icon_3Dview.gif"), wxBITMAP_TYPE_ANY ), wxNullBitmap, wxITEM_CHECK, _("Toggle Grid"), wxEmptyString ); 	m_toolBar1->AddTool( wxID_TOOLBAR_VIEWER, _("Viewer"), wxBitmap( wxT("../Resources/images/icon_toolbar_viewer.png"), wxBITMAP_TYPE_ANY ), wxNullBitmap, wxITEM_CHECK, _("Toggle 3D Viewer"), wxEmptyString ); 	m_toolBar1->AddSeparator(); 	m_staticText1 = new wxStaticText( m_toolBar1, wxID_ANY, _("Server:"), wxDefaultPosition, wxDefaultSize, 0 );	m_staticText1->Wrap( -1 );	m_toolBar1->AddControl( m_staticText1 );	wxString serverChooserChoices[] = { _("<not connected>") };	int serverChooserNChoices = sizeof( serverChooserChoices ) / sizeof( wxString );	serverChooser = new wxChoice( m_toolBar1, wxID_ANY, wxDefaultPosition, wxDefaultSize, serverChooserNChoices, serverChooserChoices, 0 );	serverChooser->SetSelection( 0 );	m_toolBar1->AddControl( serverChooser );	m_toolBar1->Realize();		menu = new wxMenuBar( 0 );	menuFile = new wxMenu();	wxMenuItem* menuItem_clear;	menuItem_clear = new wxMenuItem( menuFile, wxID_ANY, wxString( _("Clear Scene") ) , wxEmptyString, wxITEM_NORMAL );	menuFile->Append( menuItem_clear );		wxMenuItem* menuItem_quit;	menuItem_quit = new wxMenuItem( menuFile, wxID_EXIT, wxString( _("Quit") ) + wxT('\t') + wxT("ctrl-q"), wxEmptyString, wxITEM_NORMAL );	menuFile->Append( menuItem_quit );		menu->Append( menuFile, _("File") ); 		menuHelp = new wxMenu();	wxMenuItem* menuItem_help;	menuItem_help = new wxMenuItem( menuHelp, wxID_ANY, wxString( _("Online Help") ) + wxT('\t') + wxT("F1"), wxEmptyString, wxITEM_NORMAL );	menuHelp->Append( menuItem_help );		wxMenuItem* menuItem_about;	menuItem_about = new wxMenuItem( menuHelp, wxID_ABOUT, wxString( _("About") ) , wxEmptyString, wxITEM_NORMAL );	menuHelp->Append( menuItem_about );		menu->Append( menuHelp, _("Help") ); 		this->SetMenuBar( menu );			this->Centre( wxBOTH );		// Connect Events	this->Connect( wxEVT_CLOSE_WINDOW, wxCloseEventHandler( MainFrame_base::OnClose ) );	this->Connect( wxID_TOOLBAR_DEBUG, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler( MainFrame_base::OnSceneDebug ) );	this->Connect( wxID_TOOLBAR_ADD, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler( MainFrame_base::OnNewNode ) );	this->Connect( wxID_TOOLBAR_DELETE, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler( MainFrame_base::OnDeleteNode ) );	this->Connect( wxID_TOOLBAR_REFRESH, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler( MainFrame_base::OnRefreshScene ) );	this->Connect( wxID_TOOLBAR_GRID, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler( MainFrame_base::OnToggleGrid ) );	this->Connect( wxID_TOOLBAR_VIEWER, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler( MainFrame_base::OnToggleViewer ) );	serverChooser->Connect( wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler( MainFrame_base::OnServerChange ), NULL, this );	this->Connect( menuItem_clear->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MainFrame_base::OnClearScene ) );	this->Connect( menuItem_quit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MainFrame_base::OnQuit ) );	this->Connect( menuItem_help->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MainFrame_base::OnHelp ) );	this->Connect( menuItem_about->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MainFrame_base::OnAbout ) );}MainFrame_base::~MainFrame_base(){	// Disconnect Events	this->Disconnect( wxEVT_CLOSE_WINDOW, wxCloseEventHandler( MainFrame_base::OnClose ) );	this->Disconnect( wxID_TOOLBAR_DEBUG, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler( MainFrame_base::OnSceneDebug ) );	this->Disconnect( wxID_TOOLBAR_ADD, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler( MainFrame_base::OnNewNode ) );	this->Disconnect( wxID_TOOLBAR_DELETE, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler( MainFrame_base::OnDeleteNode ) );	this->Disconnect( wxID_TOOLBAR_REFRESH, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler( MainFrame_base::OnRefreshScene ) );	this->Disconnect( wxID_TOOLBAR_GRID, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler( MainFrame_base::OnToggleGrid ) );	this->Disconnect( wxID_TOOLBAR_VIEWER, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler( MainFrame_base::OnToggleViewer ) );	serverChooser->Disconnect( wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler( MainFrame_base::OnServerChange ), NULL, this );	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MainFrame_base::OnClearScene ) );	this->Disconnect( wxID_EXIT, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MainFrame_base::OnQuit ) );	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MainFrame_base::OnHelp ) );	this->Disconnect( wxID_ABOUT, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MainFrame_base::OnAbout ) );	}