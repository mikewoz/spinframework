// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <SceneManager.h>
#include <SharedVideoTexture.h>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(SharedVideoTexture)
	I_DeclaringFile("SharedVideoTexture.h");
	I_BaseType(ReferencedStateSet);
	I_Constructor2(IN, SceneManager *, sceneManager, IN, const char *, initID,
	               ____SharedVideoTexture__SceneManager_P1__C5_char_P1,
	               "",
	               "");
	I_Method1(void, setTextureID, IN, const char *, id,
	          Properties::NON_VIRTUAL,
	          __void__setTextureID__C5_char_P1,
	          "",
	          "");
	I_Method0(const char *, getTextureID,
	          Properties::NON_VIRTUAL,
	          __C5_char_P1__getTextureID,
	          "",
	          "");
	I_Method0(const char *, getPath,
	          Properties::VIRTUAL,
	          __C5_char_P1__getPath,
	          "",
	          "Abstract method getPath needs to be implemented ");
	I_Method0(std::vector< lo_message >, getState,
	          Properties::VIRTUAL,
	          __std_vectorT1_lo_message___getState,
	          "",
	          "Just like a ReferencedNode, each subclass of ReferencedStateSet must override the getState() method to pass it's current state. ");
	I_SimpleProperty(const char *, Path, 
	                 __C5_char_P1__getPath, 
	                 0);
	I_SimpleProperty(std::vector< lo_message >, State, 
	                 __std_vectorT1_lo_message___getState, 
	                 0);
	I_SimpleProperty(const char *, TextureID, 
	                 __C5_char_P1__getTextureID, 
	                 __void__setTextureID__C5_char_P1);
END_REFLECTOR

