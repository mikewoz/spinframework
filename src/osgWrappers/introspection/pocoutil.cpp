// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <cppintrospection/ReflectionMacros>
#include <cppintrospection/TypedMethodInfo>
#include <cppintrospection/StaticMethodInfo>
#include <cppintrospection/Attributes>

#include <pocoutil.h>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_VALUE_REFLECTOR(spin::FormRequestHandler)
	I_DeclaringFile("pocoutil.h");
	I_Constructor0(____FormRequestHandler,
	               "",
	               "");
	I_Method2(void, handleRequest, IN, Poco::Net::HTTPServerRequest &, request, IN, Poco::Net::HTTPServerResponse &, response,
	          Properties::NON_VIRTUAL,
	          __void__handleRequest__Poco_Net_HTTPServerRequest_R1__Poco_Net_HTTPServerResponse_R1,
	          "",
	          "");
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(spin::FormRequestHandlerFactory)
	I_DeclaringFile("pocoutil.h");
	I_Constructor0(____FormRequestHandlerFactory,
	               "",
	               "");
	I_Method1(Poco::Net::HTTPRequestHandler *, createRequestHandler, IN, const Poco::Net::HTTPServerRequest &, request,
	          Properties::NON_VIRTUAL,
	          __Poco_Net_HTTPRequestHandler_P1__createRequestHandler__C5_Poco_Net_HTTPServerRequest_R1,
	          "",
	          "");
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(spin::PartHandler)
	I_DeclaringFile("pocoutil.h");
	I_Constructor0(____PartHandler,
	               "",
	               "");
	I_Method2(void, handlePart, IN, const Poco::Net::MessageHeader &, header, IN, std::istream &, stream,
	          Properties::NON_VIRTUAL,
	          __void__handlePart__C5_Poco_Net_MessageHeader_R1__std_istream_R1,
	          "",
	          "");
	I_Method0(int, length,
	          Properties::NON_VIRTUAL,
	          __int__length,
	          "",
	          "");
	I_Method0(const std::string &, name,
	          Properties::NON_VIRTUAL,
	          __C5_std_string_R1__name,
	          "",
	          "");
	I_Method0(const std::string &, fileName,
	          Properties::NON_VIRTUAL,
	          __C5_std_string_R1__fileName,
	          "",
	          "");
	I_Method0(const std::string &, contentType,
	          Properties::NON_VIRTUAL,
	          __C5_std_string_R1__contentType,
	          "",
	          "");
END_REFLECTOR

