// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <cppintrospection/ReflectionMacros>
#include <cppintrospection/TypedMethodInfo>
#include <cppintrospection/StaticMethodInfo>
#include <cppintrospection/Attributes>

#include <compositeviewer.h>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_VALUE_REFLECTOR(spin::CompositeViewer)
	I_DeclaringFile("compositeviewer.h");
	I_Constructor1(IN, osg::ArgumentParser &, args,
	               Properties::NON_EXPLICIT,
	               ____CompositeViewer__osg_ArgumentParser_R1,
	               "Default construcotr. ",
	               "");
	I_Method0(std::vector< osgPPU::Processor * >, getProcessor,
	          Properties::NON_VIRTUAL,
	          __std_vectorT1_osgPPU_Processor_P1___getProcessor,
	          "Get the ppu processor. ",
	          "");
	I_Method4(osg::Texture *, createRenderTexture, IN, int, tex_width, IN, int, tex_height, IN, bool, depth, IN, bool, cubemap,
	          Properties::NON_VIRTUAL,
	          __osg_Texture_P1__createRenderTexture__int__int__bool__bool,
	          "Create camera resulting texture. ",
	          "");
	I_Method0(void, setupCamera,
	          Properties::NON_VIRTUAL,
	          __void__setupCamera,
	          "Setup the camera to do the render to texture. ",
	          "");
	I_Method0(void, viewerInit,
	          Properties::NON_VIRTUAL,
	          __void__viewerInit,
	          "Just setup some stuff. ",
	          "");
	I_MethodWithDefaults1(void, initializePPU, IN, unsigned int, pEffect, PPU_NONE,
	                      Properties::NON_VIRTUAL,
	                      __void__initializePPU__unsigned_int,
	                      "Setup osgppu for rendering. ",
	                      "");
	I_MethodWithDefaults1(void, spin::frame, IN, double, f, USE_REFERENCE_TIME,
	                      Properties::NON_VIRTUAL,
	                      __void__frame__double,
	                      "Update the frames. ",
	                      "");
	I_Method0(void, updateSpaceNavigator,
	          Properties::NON_VIRTUAL,
	          __void__updateSpaceNavigator,
	          "Poll the SpaceNavigator for updates and send velocity/spin. ",
	          "");
	I_Method1(void, setSpaceNavigatorNode, IN, std::string, nID,
	          Properties::NON_VIRTUAL,
	          __void__setSpaceNavigatorNode__std_string,
	          "",
	          "");
	I_Method1(void, setVelocityScalars, IN, osg::Vec3, v,
	          Properties::NON_VIRTUAL,
	          __void__setVelocityScalars__osg_Vec3,
	          "",
	          "Scale the velocity effect of navigational devices (for example, scale X and Z axes to zero so that only forward motion is allowed). ");
	I_Method1(void, setSpinScalars, IN, osg::Vec3, v,
	          Properties::NON_VIRTUAL,
	          __void__setSpinScalars__osg_Vec3,
	          "",
	          "Scale the spin effect of navigational devices (for example, disallow roll and allow only pitch and yaw by setting the scale to 1,0,1) ");
	I_Method0(bool, isDome,
	          Properties::NON_VIRTUAL,
	          __bool__isDome,
	          "",
	          "Returns true if the viewer is a dome view ");
	I_SimpleProperty(std::vector< osgPPU::Processor * >, Processor, 
	                 __std_vectorT1_osgPPU_Processor_P1___getProcessor, 
	                 0);
	I_SimpleProperty(std::string, SpaceNavigatorNode, 
	                 0, 
	                 __void__setSpaceNavigatorNode__std_string);
	I_SimpleProperty(osg::Vec3, SpinScalars, 
	                 0, 
	                 __void__setSpinScalars__osg_Vec3);
	I_SimpleProperty(osg::Vec3, VelocityScalars, 
	                 0, 
	                 __void__setVelocityScalars__osg_Vec3);
	I_PublicMemberProperty(std::vector< DoFRendering * >, mDofPPUs);
	I_PublicMemberProperty(std::vector< SSAORendering * >, mSsaoPPUs);
	I_PublicMemberProperty(std::vector< MotionBlurRendering * >, mMBlurPPUs);
	I_PublicMemberProperty(std::vector< OutlineRendering * >, mOutlinePPUs);
	I_PublicMemberProperty(std::vector< MaskRendering * >, mMaskPPUs);
	I_PublicMemberProperty(std::vector< ShaderRendering * >, mShaderPPUs);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(spin::CustomResizeHandler)
	I_DeclaringFile("compositeviewer.h");
	I_Constructor1(IN, spin::CompositeViewer *, v,
	               Properties::NON_EXPLICIT,
	               ____CustomResizeHandler__CompositeViewer_P1,
	               "",
	               "");
	I_Method2(bool, handle, IN, const osgGA::GUIEventAdapter &, ea, IN, osgGA::GUIActionAdapter &, x,
	          Properties::NON_VIRTUAL,
	          __bool__handle__C5_osgGA_GUIEventAdapter_R1__osgGA_GUIActionAdapter_R1,
	          "",
	          "");
	I_PublicMemberProperty(spin::CompositeViewer *, viewer);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(spin::frustum)
	I_DeclaringFile("compositeviewer.h");
	I_Constructor0(____frustum,
	               "",
	               "");
	I_PublicMemberProperty(bool, valid);
	I_PublicMemberProperty(float, left);
	I_PublicMemberProperty(float, right);
	I_PublicMemberProperty(float, bottom);
	I_PublicMemberProperty(float, top);
	I_PublicMemberProperty(float, near);
	I_PublicMemberProperty(float, far);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(spin::PPUProcessor)
	I_DeclaringFile("compositeviewer.h");
	I_Constructor0(____PPUProcessor,
	               "",
	               "");
	I_Method0(void, onViewportChange,
	          Properties::NON_VIRTUAL,
	          __void__onViewportChange,
	          "",
	          "");
END_REFLECTOR

STD_VECTOR_REFLECTOR(std::vector< osgPPU::Processor * >)

