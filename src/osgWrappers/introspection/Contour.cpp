// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <Contour.h>
#include <SceneManager.h>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(Contour)
	I_DeclaringFile("Contour.h");
	I_BaseType(ReferencedNode);
	I_Constructor2(IN, SceneManager *, sceneManager, IN, char *, initID,
	               ____Contour__SceneManager_P1__char_P1,
	               "",
	               "");
	I_Method0(void, updateNodePath,
	          Properties::VIRTUAL,
	          __void__updateNodePath,
	          "",
	          "IMPORTANT: subclasses of ReferencedNode are allowed to contain complicated subgraphs, and can also change their attachmentNode so that children are attached anywhere in this subgraph. If that is the case, the updateNodePath() function MUST be overridden, and extra nodes must be manually pushed onto the currentNodePath. ");
	I_Method0(void, callbackUpdate,
	          Properties::VIRTUAL,
	          __void__callbackUpdate,
	          "",
	          "For nodes that require regular programmatic control, there is a callback that is evaluated with every refresh. This function can thus be used for animations, or any other periodic updates.Note that changes to the scene graph structure (eg, moving/deleting nodes should NOT be done within this callback because traversals stacks will become corrupted. The technique is rather to enable a flag and then do the actual change in the SceneManager::updateGraph() method. ");
	I_Method0(void, updateTransforms,
	          Properties::NON_VIRTUAL,
	          __void__updateTransforms,
	          "",
	          "");
	I_Method1(osg::Quat, getOrientation, IN, int, index,
	          Properties::NON_VIRTUAL,
	          __osg_Quat__getOrientation__int,
	          "",
	          "");
	I_Method1(osg::Vec3, getTranslation, IN, float, index,
	          Properties::NON_VIRTUAL,
	          __osg_Vec3__getTranslation__float,
	          "",
	          "");
	I_Method1(void, setCurrentIndex, IN, float, newValue,
	          Properties::NON_VIRTUAL,
	          __void__setCurrentIndex__float,
	          "",
	          "");
	I_Method0(void, prev,
	          Properties::NON_VIRTUAL,
	          __void__prev,
	          "",
	          "");
	I_Method0(void, next,
	          Properties::NON_VIRTUAL,
	          __void__next,
	          "",
	          "");
	I_Method0(void, reset,
	          Properties::NON_VIRTUAL,
	          __void__reset,
	          "",
	          "");
	I_Method3(void, add, IN, float, x, IN, float, y, IN, float, z,
	          Properties::NON_VIRTUAL,
	          __void__add__float__float__float,
	          "",
	          "");
	I_Method1(void, setMaxVertices, IN, int, newValue,
	          Properties::NON_VIRTUAL,
	          __void__setMaxVertices__int,
	          "",
	          "");
	I_Method1(void, setTrackingMode, IN, int, newValue,
	          Properties::NON_VIRTUAL,
	          __void__setTrackingMode__int,
	          "",
	          "");
	I_Method1(void, setVisible, IN, int, newValue,
	          Properties::NON_VIRTUAL,
	          __void__setVisible__int,
	          "",
	          "");
	I_Method1(void, setThickness, IN, float, newValue,
	          Properties::NON_VIRTUAL,
	          __void__setThickness__float,
	          "",
	          "");
	I_Method1(void, setLineType, IN, int, newValue,
	          Properties::NON_VIRTUAL,
	          __void__setLineType__int,
	          "",
	          "");
	I_Method4(void, setColor, IN, float, newR, IN, float, newG, IN, float, newB, IN, float, newA,
	          Properties::NON_VIRTUAL,
	          __void__setColor__float__float__float__float,
	          "",
	          "");
	I_Method0(float, getCurrentIndex,
	          Properties::NON_VIRTUAL,
	          __float__getCurrentIndex,
	          "",
	          "");
	I_Method0(int, getMaxVertices,
	          Properties::NON_VIRTUAL,
	          __int__getMaxVertices,
	          "",
	          "");
	I_Method0(int, getTrackingMode,
	          Properties::NON_VIRTUAL,
	          __int__getTrackingMode,
	          "",
	          "");
	I_Method0(int, getVisible,
	          Properties::NON_VIRTUAL,
	          __int__getVisible,
	          "",
	          "");
	I_Method0(float, getThickness,
	          Properties::NON_VIRTUAL,
	          __float__getThickness,
	          "",
	          "");
	I_Method0(float, getLineType,
	          Properties::NON_VIRTUAL,
	          __float__getLineType,
	          "",
	          "");
	I_Method0(osg::Vec4, getColor,
	          Properties::NON_VIRTUAL,
	          __osg_Vec4__getColor,
	          "",
	          "");
	I_Method0(void, draw,
	          Properties::NON_VIRTUAL,
	          __void__draw,
	          "",
	          "");
	I_Method0(std::vector< lo_message >, getState,
	          Properties::VIRTUAL,
	          __std_vectorT1_lo_message___getState,
	          "",
	          "For each subclass of ReferencedNode, we override the getState() method to fill the vector with the correct set of methods for this particular node ");
	I_SimpleProperty(osg::Vec4, Color, 
	                 __osg_Vec4__getColor, 
	                 0);
	I_SimpleProperty(float, CurrentIndex, 
	                 __float__getCurrentIndex, 
	                 __void__setCurrentIndex__float);
	I_SimpleProperty(float, LineType, 
	                 __float__getLineType, 
	                 0);
	I_SimpleProperty(int, MaxVertices, 
	                 __int__getMaxVertices, 
	                 __void__setMaxVertices__int);
	I_SimpleProperty(std::vector< lo_message >, State, 
	                 __std_vectorT1_lo_message___getState, 
	                 0);
	I_SimpleProperty(float, Thickness, 
	                 __float__getThickness, 
	                 __void__setThickness__float);
	I_SimpleProperty(int, TrackingMode, 
	                 __int__getTrackingMode, 
	                 __void__setTrackingMode__int);
	I_SimpleProperty(int, Visible, 
	                 __int__getVisible, 
	                 __void__setVisible__int);
END_REFLECTOR

