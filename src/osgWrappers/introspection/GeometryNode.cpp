// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <cppintrospection/ReflectionMacros>
#include <cppintrospection/TypedMethodInfo>
#include <cppintrospection/StaticMethodInfo>
#include <cppintrospection/Attributes>

#include <GeometryNode.h>
#include <SceneManager.h>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(spin::GeometryNode)
	I_DeclaringFile("GeometryNode.h");
	I_BaseType(spin::GroupNode);
	I_Constructor2(IN, spin::SceneManager *, sceneManager, IN, char *, initID,
	               ____GeometryNode__SceneManager_P1__char_P1,
	               "",
	               "");
	I_Method0(void, callbackUpdate,
	          Properties::VIRTUAL,
	          __void__callbackUpdate,
	          "",
	          "For nodes that require regular programmatic control, there is a callback that is evaluated with every refresh. This function can thus be used for animations, or any other periodic updates.Note that changes to the scene graph structure (eg, moving/deleting nodes should NOT be done within this callback because traversals stacks will become corrupted. The technique is rather to enable a flag and then do the actual change in the SceneManager::updateGraph() method. ");
	I_Method1(void, setStateSetFromFile, IN, const char *, filename,
	          Properties::NON_VIRTUAL,
	          __void__setStateSetFromFile__C5_char_P1,
	          "",
	          "");
	I_Method1(void, setStateSet, IN, const char *, s,
	          Properties::NON_VIRTUAL,
	          __void__setStateSet__C5_char_P1,
	          "",
	          "");
	I_Method0(const char *, getStateSet,
	          Properties::NON_VIRTUAL,
	          __C5_char_P1__getStateSet,
	          "",
	          "");
	I_Method0(void, updateStateSet,
	          Properties::NON_VIRTUAL,
	          __void__updateStateSet,
	          "",
	          "");
	I_Method0(int, getRenderBin,
	          Properties::NON_VIRTUAL,
	          __int__getRenderBin,
	          "",
	          "");
	I_Method0(int, getLighting,
	          Properties::NON_VIRTUAL,
	          __int__getLighting,
	          "",
	          "");
	I_Method1(void, setRenderBin, IN, int, i,
	          Properties::NON_VIRTUAL,
	          __void__setRenderBin__int,
	          "",
	          "");
	I_Method1(void, setLighting, IN, int, i,
	          Properties::NON_VIRTUAL,
	          __void__setLighting__int,
	          "",
	          "");
	I_Method1(void, setNumVertices, IN, int, i,
	          Properties::NON_VIRTUAL,
	          __void__setNumVertices__int,
	          "",
	          "");
	I_Method4(void, setVertex, IN, int, index, IN, float, x, IN, float, y, IN, float, z,
	          Properties::NON_VIRTUAL,
	          __void__setVertex__int__float__float__float,
	          "",
	          "");
	I_Method5(void, setColor, IN, int, index, IN, float, red, IN, float, green, IN, float, blue, IN, float, alpha,
	          Properties::NON_VIRTUAL,
	          __void__setColor__int__float__float__float__float,
	          "",
	          "");
	I_Method3(void, setTexCoord, IN, int, index, IN, float, x, IN, float, y,
	          Properties::NON_VIRTUAL,
	          __void__setTexCoord__int__float__float,
	          "",
	          "");
	I_Method0(std::vector< lo_message >, getState,
	          Properties::VIRTUAL,
	          __std_vectorT1_lo_message___getState,
	          "",
	          "For each subclass of ReferencedNode, we override the getState() method to fill the vector with the correct set of methods for this particular node ");
	I_SimpleProperty(int, Lighting, 
	                 __int__getLighting, 
	                 __void__setLighting__int);
	I_SimpleProperty(int, NumVertices, 
	                 0, 
	                 __void__setNumVertices__int);
	I_SimpleProperty(int, RenderBin, 
	                 __int__getRenderBin, 
	                 __void__setRenderBin__int);
	I_SimpleProperty(std::vector< lo_message >, State, 
	                 __std_vectorT1_lo_message___getState, 
	                 0);
	I_SimpleProperty(const char *, StateSet, 
	                 __C5_char_P1__getStateSet, 
	                 __void__setStateSet__C5_char_P1);
	I_SimpleProperty(const char *, StateSetFromFile, 
	                 0, 
	                 __void__setStateSetFromFile__C5_char_P1);
END_REFLECTOR

