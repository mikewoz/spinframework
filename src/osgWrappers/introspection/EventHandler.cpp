// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <cppintrospection/ReflectionMacros>
#include <cppintrospection/TypedMethodInfo>
#include <cppintrospection/StaticMethodInfo>
#include <cppintrospection/Attributes>

#include <EventHandler.h>
#include <EventTypes.h>
#include <ReferencedNode.h>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_VALUE_REFLECTOR(spin::EventHandler)
	I_DeclaringFile("EventHandler.h");
	I_Constructor0(____EventHandler,
	               "",
	               "");
	I_Method1(void, onServerChange, IN, std::vector< spin::InfoMessage * >, serverList,
	          Properties::VIRTUAL,
	          __void__onServerChange__std_vectorT1_InfoMessage_P1_,
	          "",
	          "An event that occurs whenever the server list changes (spin clients only) ");
	I_Method3(void, onSceneMessage, IN, const char *, x, IN, lo_arg **, x, IN, int, x,
	          Properties::VIRTUAL,
	          __void__onSceneMessage__C5_char_P1__lo_arg_P1P1__int,
	          "",
	          "Event handler for scene messages (eg, createNode, deleteNode, etc). ");
	I_Method4(void, onNodeMessage, IN, spin::ReferencedNode *, x, IN, const char *, x, IN, lo_arg **, x, IN, int, x,
	          Properties::VIRTUAL,
	          __void__onNodeMessage__ReferencedNode_P1__C5_char_P1__lo_arg_P1P1__int,
	          "",
	          "Event handler for node messages ");
	I_Method1(void, onInfoMessage, IN, spin::InfoMessage *, x,
	          Properties::VIRTUAL,
	          __void__onInfoMessage__spin_InfoMessage_P1,
	          "",
	          "Event handler for info messages.Note: this is sent repeatedly at the ping rate of the server (but only in the case where this spin context is running in client mode). ");
END_REFLECTOR

STD_VECTOR_REFLECTOR(std::vector< spin::InfoMessage * >)

