// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <cppintrospection/ReflectionMacros>
#include <cppintrospection/TypedMethodInfo>
#include <cppintrospection/StaticMethodInfo>
#include <cppintrospection/Attributes>

#include <dspnode.h>
#include <scenemanager.h>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(spin::DSPNode)
	I_DeclaringFile("dspnode.h");
	I_BaseType(spin::GroupNode);
	I_Constructor2(IN, spin::SceneManager *, sceneManager, IN, const char *, initID,
	               ____DSPNode__SceneManager_P1__C5_char_P1,
	               "",
	               "");
	I_Method0(void, debug,
	          Properties::VIRTUAL,
	          __void__debug,
	          "",
	          "Print debug information about the node to standard out (when running in console mode). It may be possible to redirect this to a text box for GUI logs. ");
	I_Method1(void, callbackUpdate, IN, osg::NodeVisitor *, nv,
	          Properties::VIRTUAL,
	          __void__callbackUpdate__osg_NodeVisitor_P1,
	          "",
	          "For nodes that require regular programmatic control, there is a callback that is evaluated with every refresh. This function can thus be used for animations, or any other periodic updates.Note that changes to the scene graph structure (eg, moving/deleting nodes should NOT be done within this callback because traversals stacks will become corrupted. The technique is rather to enable a flag and then do the actual change in the SceneManager::updateGraph() method. ");
	I_MethodWithDefaults1(bool, dumpGlobals, IN, bool, forced, false,
	                      Properties::VIRTUAL,
	                      __bool__dumpGlobals__bool,
	                      "",
	                      "The dumpGlobals method results in a broadcast of this node's translation and orientation. It is called by callbackUpdate() every frame, however the 'forced' flag will be set to false, so it will only send a message if the node's matrix has changed. If the 'forced' flag is set to true, it will definitely result in a message broadcast. This should only be used when necessary (eg, when a stateDump is requested).Note: the return value is only to fool wx so that it doesn't consider this as an editable property. ");
	I_Method1(void, setURI, IN, const char *, uri,
	          Properties::VIRTUAL,
	          __void__setURI__C5_char_P1,
	          "",
	          "Set the media for the sound node using a URI pattern.Examples: file://soundfilename.wav file:///home/johndoe/soundfilename.wav http://www.server.com/soundfile.wav adc://1:1 adc://1 content://media/external/audio/media/710 mms://some_media_stream rtsp://127.0.0.1:12311 pd_plugin://audio_plugin_patch.pd ");
	I_Method0(const char *, getURI,
	          Properties::NON_VIRTUAL,
	          __C5_char_P1__getURI,
	          "",
	          "Returns the currently-set URI associated with the sound node. ");
	I_Method1(void, setActive, IN, int, i,
	          Properties::VIRTUAL,
	          __void__setActive__int,
	          "",
	          "Activate or deactivate the DSP processing ");
	I_Method0(int, getActive,
	          Properties::NON_VIRTUAL,
	          __int__getActive,
	          "",
	          "Returns whether the DSP processing is active or inactive. ");
	I_Method0(std::vector< lo_message >, getState,
	          Properties::VIRTUAL,
	          __std_vectorT1_lo_message___getState,
	          "",
	          "For each subclass of ReferencedNode, we override the getState() method to fill the vector with the correct set of methods for this particular node ");
	I_Method1(void, setRolloff, IN, const char *, newvalue,
	          Properties::VIRTUAL,
	          __void__setRolloff__C5_char_P1,
	          "",
	          "");
	I_Method1(void, setSpread, IN, float, newvalue,
	          Properties::VIRTUAL,
	          __void__setSpread__float,
	          "",
	          "");
	I_Method1(void, setLength, IN, float, newvalue,
	          Properties::VIRTUAL,
	          __void__setLength__float,
	          "",
	          "");
	I_Method1(void, setRadius, IN, float, newvalue,
	          Properties::VIRTUAL,
	          __void__setRadius__float,
	          "",
	          "");
	I_Method4(void, setDebugColor, IN, float, r, IN, float, g, IN, float, b, IN, float, a,
	          Properties::NON_VIRTUAL,
	          __void__setDebugColor__float__float__float__float,
	          "",
	          "");
	I_Method1(void, setVUmeterFlag, IN, float, newFlag,
	          Properties::NON_VIRTUAL,
	          __void__setVUmeterFlag__float,
	          "",
	          "");
	I_Method1(void, setDirectivityFlag, IN, float, newFlag,
	          Properties::NON_VIRTUAL,
	          __void__setDirectivityFlag__float,
	          "",
	          "");
	I_Method1(void, setLaserFlag, IN, float, newFlag,
	          Properties::NON_VIRTUAL,
	          __void__setLaserFlag__float,
	          "",
	          "");
	I_Method1(void, setRadiusFlag, IN, float, newFlag,
	          Properties::NON_VIRTUAL,
	          __void__setRadiusFlag__float,
	          "",
	          "");
	I_Method1(void, setIntensity, IN, float, newvalue,
	          Properties::NON_VIRTUAL,
	          __void__setIntensity__float,
	          "",
	          "");
	I_Method0(const char *, getRolloff,
	          Properties::NON_VIRTUAL,
	          __C5_char_P1__getRolloff,
	          "",
	          "");
	I_Method0(float, getSpread,
	          Properties::NON_VIRTUAL,
	          __float__getSpread,
	          "",
	          "");
	I_Method0(float, getLength,
	          Properties::NON_VIRTUAL,
	          __float__getLength,
	          "",
	          "");
	I_Method0(float, getRadius,
	          Properties::NON_VIRTUAL,
	          __float__getRadius,
	          "",
	          "");
	I_Method0(osg::Vec4, getDebugColor,
	          Properties::NON_VIRTUAL,
	          __osg_Vec4__getDebugColor,
	          "",
	          "");
	I_Method0(float, getVUmeterFlag,
	          Properties::NON_VIRTUAL,
	          __float__getVUmeterFlag,
	          "",
	          "");
	I_Method0(float, getDirectivityFlag,
	          Properties::NON_VIRTUAL,
	          __float__getDirectivityFlag,
	          "",
	          "");
	I_Method0(float, getLaserFlag,
	          Properties::NON_VIRTUAL,
	          __float__getLaserFlag,
	          "",
	          "");
	I_Method0(float, getRadiusFlag,
	          Properties::NON_VIRTUAL,
	          __float__getRadiusFlag,
	          "",
	          "");
	I_Method0(void, updateVUmeter,
	          Properties::NON_VIRTUAL,
	          __void__updateVUmeter,
	          "",
	          "");
	I_Method0(void, updateLaser,
	          Properties::NON_VIRTUAL,
	          __void__updateLaser,
	          "",
	          "");
	I_Method0(void, drawVUmeter,
	          Properties::NON_VIRTUAL,
	          __void__drawVUmeter,
	          "",
	          "");
	I_Method0(void, drawDirectivity,
	          Properties::NON_VIRTUAL,
	          __void__drawDirectivity,
	          "",
	          "");
	I_Method0(void, drawLaser,
	          Properties::NON_VIRTUAL,
	          __void__drawLaser,
	          "",
	          "");
	I_Method0(void, drawRadius,
	          Properties::NON_VIRTUAL,
	          __void__drawRadius,
	          "",
	          "");
	I_SimpleProperty(int, Active, 
	                 __int__getActive, 
	                 __void__setActive__int);
	I_SimpleProperty(osg::Vec4, DebugColor, 
	                 __osg_Vec4__getDebugColor, 
	                 0);
	I_SimpleProperty(float, DirectivityFlag, 
	                 __float__getDirectivityFlag, 
	                 __void__setDirectivityFlag__float);
	I_SimpleProperty(float, Intensity, 
	                 0, 
	                 __void__setIntensity__float);
	I_SimpleProperty(float, LaserFlag, 
	                 __float__getLaserFlag, 
	                 __void__setLaserFlag__float);
	I_SimpleProperty(float, Length, 
	                 __float__getLength, 
	                 __void__setLength__float);
	I_SimpleProperty(float, Radius, 
	                 __float__getRadius, 
	                 __void__setRadius__float);
	I_SimpleProperty(float, RadiusFlag, 
	                 __float__getRadiusFlag, 
	                 __void__setRadiusFlag__float);
	I_SimpleProperty(const char *, Rolloff, 
	                 __C5_char_P1__getRolloff, 
	                 __void__setRolloff__C5_char_P1);
	I_SimpleProperty(float, Spread, 
	                 __float__getSpread, 
	                 __void__setSpread__float);
	I_SimpleProperty(std::vector< lo_message >, State, 
	                 __std_vectorT1_lo_message___getState, 
	                 0);
	I_SimpleProperty(const char *, URI, 
	                 __C5_char_P1__getURI, 
	                 __void__setURI__C5_char_P1);
	I_SimpleProperty(float, VUmeterFlag, 
	                 __float__getVUmeterFlag, 
	                 __void__setVUmeterFlag__float);
END_REFLECTOR

