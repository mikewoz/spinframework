// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <SceneManager.h>
#include <SoundNode.h>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(SoundNode)
	I_DeclaringFile("SoundNode.h");
	I_BaseType(DSPNode);
	I_Constructor2(IN, SceneManager *, sceneManager, IN, char *, initID,
	               ____SoundNode__SceneManager_P1__char_P1,
	               "",
	               "");
	I_Method1(void, setRolloff, IN, const char *, newvalue,
	          Properties::NON_VIRTUAL,
	          __void__setRolloff__C5_char_P1,
	          "",
	          "");
	I_Method1(void, setSpread, IN, float, newvalue,
	          Properties::NON_VIRTUAL,
	          __void__setSpread__float,
	          "",
	          "");
	I_Method1(void, setLength, IN, float, newvalue,
	          Properties::NON_VIRTUAL,
	          __void__setLength__float,
	          "",
	          "");
	I_Method1(void, setVUmeterFlag, IN, float, newFlag,
	          Properties::NON_VIRTUAL,
	          __void__setVUmeterFlag__float,
	          "",
	          "");
	I_Method1(void, setDirectivityFlag, IN, float, newFlag,
	          Properties::NON_VIRTUAL,
	          __void__setDirectivityFlag__float,
	          "",
	          "");
	I_Method1(void, setLaserFlag, IN, float, newFlag,
	          Properties::NON_VIRTUAL,
	          __void__setLaserFlag__float,
	          "",
	          "");
	I_Method1(void, setIntensity, IN, float, newvalue,
	          Properties::NON_VIRTUAL,
	          __void__setIntensity__float,
	          "",
	          "");
	I_Method0(const char *, getRolloff,
	          Properties::NON_VIRTUAL,
	          __C5_char_P1__getRolloff,
	          "",
	          "");
	I_Method0(float, getSpread,
	          Properties::NON_VIRTUAL,
	          __float__getSpread,
	          "",
	          "");
	I_Method0(float, getLength,
	          Properties::NON_VIRTUAL,
	          __float__getLength,
	          "",
	          "");
	I_Method0(float, getVUmeterFlag,
	          Properties::NON_VIRTUAL,
	          __float__getVUmeterFlag,
	          "",
	          "");
	I_Method0(float, getDirectivityFlag,
	          Properties::NON_VIRTUAL,
	          __float__getDirectivityFlag,
	          "",
	          "");
	I_Method0(float, getLaserFlag,
	          Properties::NON_VIRTUAL,
	          __float__getLaserFlag,
	          "",
	          "");
	I_Method0(void, updateVUmeter,
	          Properties::NON_VIRTUAL,
	          __void__updateVUmeter,
	          "",
	          "");
	I_Method0(void, updateLaser,
	          Properties::NON_VIRTUAL,
	          __void__updateLaser,
	          "",
	          "");
	I_Method0(void, drawVUmeter,
	          Properties::NON_VIRTUAL,
	          __void__drawVUmeter,
	          "",
	          "");
	I_Method0(void, drawDirectivity,
	          Properties::NON_VIRTUAL,
	          __void__drawDirectivity,
	          "",
	          "");
	I_Method0(void, drawLaser,
	          Properties::NON_VIRTUAL,
	          __void__drawLaser,
	          "",
	          "");
	I_Method0(std::vector< lo_message >, getState,
	          Properties::VIRTUAL,
	          __std_vectorT1_lo_message___getState,
	          "",
	          "For each subclass of ReferencedNode, we override the getState() method to fill the vector with the correct set of methods for this particular node ");
	I_SimpleProperty(float, DirectivityFlag, 
	                 __float__getDirectivityFlag, 
	                 __void__setDirectivityFlag__float);
	I_SimpleProperty(float, Intensity, 
	                 0, 
	                 __void__setIntensity__float);
	I_SimpleProperty(float, LaserFlag, 
	                 __float__getLaserFlag, 
	                 __void__setLaserFlag__float);
	I_SimpleProperty(float, Length, 
	                 __float__getLength, 
	                 __void__setLength__float);
	I_SimpleProperty(const char *, Rolloff, 
	                 __C5_char_P1__getRolloff, 
	                 __void__setRolloff__C5_char_P1);
	I_SimpleProperty(float, Spread, 
	                 __float__getSpread, 
	                 __void__setSpread__float);
	I_SimpleProperty(std::vector< lo_message >, State, 
	                 __std_vectorT1_lo_message___getState, 
	                 0);
	I_SimpleProperty(float, VUmeterFlag, 
	                 __float__getVUmeterFlag, 
	                 __void__setVUmeterFlag__float);
END_REFLECTOR

