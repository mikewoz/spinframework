// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <cppintrospection/ReflectionMacros>
#include <cppintrospection/TypedMethodInfo>
#include <cppintrospection/StaticMethodInfo>
#include <cppintrospection/Attributes>

#include <PointerNode.h>
#include <ReferencedNode.h>
#include <SceneManager.h>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(spin::PointerNode)
	I_DeclaringFile("PointerNode.h");
	I_BaseType(spin::ReferencedNode);
	I_Constructor2(IN, spin::SceneManager *, sceneManager, IN, char *, initID,
	               ____PointerNode__SceneManager_P1__char_P1,
	               "",
	               "");
	I_Method0(void, callbackUpdate,
	          Properties::VIRTUAL,
	          __void__callbackUpdate,
	          "",
	          "For nodes that require regular programmatic control, there is a callback that is evaluated with every refresh. This function can thus be used for animations, or any other periodic updates.Note that changes to the scene graph structure (eg, moving/deleting nodes should NOT be done within this callback because traversals stacks will become corrupted. The technique is rather to enable a flag and then do the actual change in the SceneManager::updateGraph() method. ");
	I_Method0(void, enableDragger,
	          Properties::NON_VIRTUAL,
	          __void__enableDragger,
	          "",
	          "");
	I_Method0(void, disableDragger,
	          Properties::NON_VIRTUAL,
	          __void__disableDragger,
	          "",
	          "");
	I_Method0(spin::ReferencedNode *, getNodeFromIntersections,
	          Properties::NON_VIRTUAL,
	          __ReferencedNode_P1__getNodeFromIntersections,
	          "",
	          "");
	I_Method1(void, setType, IN, char *, s,
	          Properties::NON_VIRTUAL,
	          __void__setType__char_P1,
	          "",
	          "");
	I_Method1(void, highlight, IN, int, b,
	          Properties::NON_VIRTUAL,
	          __void__highlight__int,
	          "",
	          "");
	I_Method1(void, manipulate, IN, int, b,
	          Properties::NON_VIRTUAL,
	          __void__manipulate__int,
	          "",
	          "The manipulate() method performs OSG dragger manipulations (once a node has been \"highlighted\" for manipulation). That is, a dragger needs to be attached to a node somewhere, and we check intersections to see if the pointer has selected any of the dragger handles. ");
	I_Method0(const char *, getType,
	          Properties::NON_VIRTUAL,
	          __C5_char_P1__getType,
	          "",
	          "");
	I_Method0(int, getHighlight,
	          Properties::NON_VIRTUAL,
	          __int__getHighlight,
	          "",
	          "");
	I_Method0(int, getManipulate,
	          Properties::NON_VIRTUAL,
	          __int__getManipulate,
	          "",
	          "");
	I_Method1(void, grab, IN, int, b,
	          Properties::NON_VIRTUAL,
	          __void__grab__int,
	          "",
	          "");
	I_Method1(void, pull, IN, float, f,
	          Properties::NON_VIRTUAL,
	          __void__pull__float,
	          "",
	          "");
	I_Method0(int, getGrab,
	          Properties::NON_VIRTUAL,
	          __int__getGrab,
	          "",
	          "");
	I_Method0(std::vector< lo_message >, getState,
	          Properties::VIRTUAL,
	          __std_vectorT1_lo_message___getState,
	          "",
	          "For each subclass of ReferencedNode, we override the getState() method to fill the vector with the correct set of methods for this particular node ");
	I_SimpleProperty(int, Grab, 
	                 __int__getGrab, 
	                 0);
	I_SimpleProperty(int, Highlight, 
	                 __int__getHighlight, 
	                 0);
	I_SimpleProperty(int, Manipulate, 
	                 __int__getManipulate, 
	                 0);
	I_SimpleProperty(spin::ReferencedNode *, NodeFromIntersections, 
	                 __ReferencedNode_P1__getNodeFromIntersections, 
	                 0);
	I_SimpleProperty(std::vector< lo_message >, State, 
	                 __std_vectorT1_lo_message___getState, 
	                 0);
	I_SimpleProperty(char *, Type, 
	                 0, 
	                 __void__setType__char_P1);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(spin::PointerNodeActionAdapter)
	I_DeclaringFile("PointerNode.h");
	I_Constructor0(____PointerNodeActionAdapter,
	               "",
	               "");
END_REFLECTOR

