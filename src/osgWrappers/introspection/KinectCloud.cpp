// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <cppintrospection/ReflectionMacros>
#include <cppintrospection/TypedMethodInfo>
#include <cppintrospection/StaticMethodInfo>
#include <cppintrospection/Attributes>

#include <KinectCloud.h>
#include <SceneManager.h>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_ENUM_REFLECTOR(spin::KinectCloud::DrawMode)
	I_DeclaringFile("KinectCloud.h");
	I_EnumLabel(spin::KinectCloud::NONE);
	I_EnumLabel(spin::KinectCloud::POINTS);
	I_EnumLabel(spin::KinectCloud::LINES);
	I_EnumLabel(spin::KinectCloud::LINE_STRIP);
	I_EnumLabel(spin::KinectCloud::LINE_LOOP);
	I_EnumLabel(spin::KinectCloud::TRIANGLES);
	I_EnumLabel(spin::KinectCloud::TRIANGLE_STRIP);
	I_EnumLabel(spin::KinectCloud::TRIANGLE_FAN);
	I_EnumLabel(spin::KinectCloud::QUADS);
	I_EnumLabel(spin::KinectCloud::QUAD_STRIP);
	I_EnumLabel(spin::KinectCloud::POLYGON);
	I_EnumLabel(spin::KinectCloud::LIGHTPOINTS);
	I_EnumLabel(spin::KinectCloud::BOXES);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(spin::KinectCloud)
	I_DeclaringFile("KinectCloud.h");
	I_BaseType(spin::GroupNode);
	I_Constructor2(IN, spin::SceneManager *, sceneManager, IN, const char *, initID,
	               ____KinectCloud__SceneManager_P1__C5_char_P1,
	               "",
	               "");
	I_Method1(void, callbackUpdate, IN, osg::NodeVisitor *, nv,
	          Properties::VIRTUAL,
	          __void__callbackUpdate__osg_NodeVisitor_P1,
	          "",
	          "update from kinect ");
	I_Method1(void, setDrawMode, IN, spin::KinectCloud::DrawMode, mode,
	          Properties::NON_VIRTUAL,
	          __void__setDrawMode__DrawMode,
	          "",
	          "Sets the mode for drawing the point cloud, based on the types in the DrawMode enumerator. ");
	I_Method1(void, setSpacing, IN, float, spacing,
	          Properties::NON_VIRTUAL,
	          __void__setSpacing__float,
	          "",
	          "Sets the spacing between points generated by the point cloud. ");
	I_Method1(void, setRandomCoeff, IN, float, randomCoeff,
	          Properties::NON_VIRTUAL,
	          __void__setRandomCoeff__float,
	          "",
	          "");
	I_Method1(void, setPointSize, IN, float, pointsize,
	          Properties::NON_VIRTUAL,
	          __void__setPointSize__float,
	          "",
	          "Sets the size of the points in the point cloud. ");
	I_Method4(void, setColor, IN, float, red, IN, float, green, IN, float, blue, IN, float, alpha,
	          Properties::NON_VIRTUAL,
	          __void__setColor__float__float__float__float,
	          "",
	          "Sets the color of the drawn point cloud in RGBA. ");
	I_Method0(int, getDrawMode,
	          Properties::NON_VIRTUAL,
	          __int__getDrawMode,
	          "",
	          "Returns the Draw Mode set from the choices in the DrawMode enumerator. ");
	I_Method0(float, getSpacing,
	          Properties::NON_VIRTUAL,
	          __float__getSpacing,
	          "",
	          "");
	I_Method0(float, getRandomCoeff,
	          Properties::NON_VIRTUAL,
	          __float__getRandomCoeff,
	          "",
	          "");
	I_Method0(float, getPointSize,
	          Properties::NON_VIRTUAL,
	          __float__getPointSize,
	          "",
	          "");
	I_Method0(osg::Vec4, getColor,
	          Properties::NON_VIRTUAL,
	          __osg_Vec4__getColor,
	          "",
	          "Returns a Vector4 indicating the color in RGBA values. ");
	I_Method0(std::vector< lo_message >, getState,
	          Properties::VIRTUAL,
	          __std_vectorT1_lo_message___getState,
	          "",
	          "For each subclass of ReferencedNode, we override the getState() method to fill the vector with the correct set of methods for this particular node ");
	I_StaticMethod1(void *, freenectThreadFunction, IN, void *, arg,
	                __void_P1__freenectThreadFunction__void_P1_S,
	                "",
	                "thread function (grabs data from freenect) ");
	I_StaticMethod3(void, depthCallback, IN, freenect_device *, dev, IN, void *, v_depth, IN, uint32_t, timestamp,
	                __void__depthCallback__freenect_device_P1__void_P1__uint32_t_S,
	                "",
	                "");
	I_SimpleProperty(osg::Vec4, Color, 
	                 __osg_Vec4__getColor, 
	                 0);
	I_SimpleProperty(int, DrawMode, 
	                 __int__getDrawMode, 
	                 0);
	I_SimpleProperty(float, PointSize, 
	                 __float__getPointSize, 
	                 __void__setPointSize__float);
	I_SimpleProperty(float, RandomCoeff, 
	                 __float__getRandomCoeff, 
	                 __void__setRandomCoeff__float);
	I_SimpleProperty(float, Spacing, 
	                 __float__getSpacing, 
	                 __void__setSpacing__float);
	I_SimpleProperty(std::vector< lo_message >, State, 
	                 __std_vectorT1_lo_message___getState, 
	                 0);
END_REFLECTOR

