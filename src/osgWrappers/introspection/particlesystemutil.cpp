// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <cppintrospection/ReflectionMacros>
#include <cppintrospection/TypedMethodInfo>
#include <cppintrospection/StaticMethodInfo>
#include <cppintrospection/Attributes>

#include <animationnode.h>
#include <particlesystemutil.h>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(spin::AttractOperator)
	I_DeclaringFile("particlesystemutil.h");
	I_Constructor0(____AttractOperator,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const spin::AttractOperator &, copy, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____AttractOperator__C5_AttractOperator_R1__C5_osg_CopyOp_R1,
	                           "",
	                           "");
	I_Method2(, META_Object, IN, spin, x, IN, spin::AttractOperator, x,
	          Properties::NON_VIRTUAL,
	          ____META_Object__spin__AttractOperator,
	          "",
	          "");
	I_Method1(void, setCenter, IN, const osg::Vec3 &, c,
	          Properties::NON_VIRTUAL,
	          __void__setCenter__C5_osg_Vec3_R1,
	          "Set the center of the attractive force. ",
	          "");
	I_Method0(const osg::Vec3 &, getCenter,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec3_R1__getCenter,
	          "Get the center of the attractive force. ",
	          "");
	I_Method1(void, setMagnitude, IN, float, mag,
	          Properties::NON_VIRTUAL,
	          __void__setMagnitude__float,
	          "Set the acceleration scale. ",
	          "");
	I_Method0(float, getMagnitude,
	          Properties::NON_VIRTUAL,
	          __float__getMagnitude,
	          "Get the acceleration scale. ",
	          "");
	I_Method1(void, setRatio, IN, float, r,
	          Properties::NON_VIRTUAL,
	          __void__setRatio__float,
	          "Set the attraction ratio (CURRENTLY UNUSED) ",
	          "");
	I_Method0(float, getRatio,
	          Properties::NON_VIRTUAL,
	          __float__getRatio,
	          "Get the attraction ratio. ",
	          "");
	I_Method1(void, setKillSink, IN, bool, kill,
	          Properties::NON_VIRTUAL,
	          __void__setKillSink__bool,
	          "Set whether the attractor kills the particles once they arrive. ",
	          "");
	I_Method0(bool, getKillSink,
	          Properties::NON_VIRTUAL,
	          __bool__getKillSink,
	          "Get whether the attractor kills the particles once they arrive. ",
	          "");
	I_Method2(void, operate, IN, osgParticle::Particle *, P, IN, double, dt,
	          Properties::NON_VIRTUAL,
	          __void__operate__osgParticle_Particle_P1__double,
	          "Apply attraction to a particle. Do not call this method manually. ",
	          "");
	I_Method1(void, beginOperate, IN, osgParticle::Program *, prg,
	          Properties::NON_VIRTUAL,
	          __void__beginOperate__osgParticle_Program_P1,
	          "Perform some initializations. Do not call this method manually. ",
	          "");
	I_SimpleProperty(const osg::Vec3 &, Center, 
	                 __C5_osg_Vec3_R1__getCenter, 
	                 __void__setCenter__C5_osg_Vec3_R1);
	I_SimpleProperty(bool, KillSink, 
	                 __bool__getKillSink, 
	                 __void__setKillSink__bool);
	I_SimpleProperty(float, Magnitude, 
	                 __float__getMagnitude, 
	                 __void__setMagnitude__float);
	I_SimpleProperty(float, Ratio, 
	                 __float__getRatio, 
	                 __void__setRatio__float);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(spin::BouncerOperator)
	I_DeclaringFile("particlesystemutil.h");
	I_Constructor0(____BouncerOperator,
	               "",
	               "");
	I_Method1(osgParticle::DomainOperator::Domain *, getDomainPointer, IN, unsigned int, i,
	          Properties::NON_VIRTUAL,
	          __osgParticle_DomainOperator_Domain_P1__getDomainPointer__unsigned_int,
	          "",
	          "");
	I_Method1(void, updatePlane, IN, osgParticle::DomainOperator::Domain *, d,
	          Properties::NON_VIRTUAL,
	          __void__updatePlane__osgParticle_DomainOperator_Domain_P1,
	          "",
	          "");
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(spin::NullOperator)
	I_DeclaringFile("particlesystemutil.h");
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(spin::OscillatorOperator)
	I_DeclaringFile("particlesystemutil.h");
	I_Constructor0(____OscillatorOperator,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const spin::OscillatorOperator &, copy, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____OscillatorOperator__C5_OscillatorOperator_R1__C5_osg_CopyOp_R1,
	                           "",
	                           "");
	I_Method2(, META_Object, IN, spin, x, IN, spin::OscillatorOperator, x,
	          Properties::NON_VIRTUAL,
	          ____META_Object__spin__OscillatorOperator,
	          "",
	          "");
	I_Method1(void, setAmplitude, IN, float, amp,
	          Properties::NON_VIRTUAL,
	          __void__setAmplitude__float,
	          "Set the amplitude scalar. ",
	          "");
	I_Method0(float, getAmplitude,
	          Properties::NON_VIRTUAL,
	          __float__getAmplitude,
	          "Get the amplitude. ",
	          "");
	I_Method1(void, setFrequency, IN, float, f,
	          Properties::NON_VIRTUAL,
	          __void__setFrequency__float,
	          "Set frequency. ",
	          "");
	I_Method0(float, getFrequency,
	          Properties::NON_VIRTUAL,
	          __float__getFrequency,
	          "Get the frequency. ",
	          "");
	I_Method1(void, setAngleLock, IN, bool, lock,
	          Properties::NON_VIRTUAL,
	          __void__setAngleLock__bool,
	          "Set whether the particle's angle is locked to the oscillation. ",
	          "");
	I_Method0(bool, getAngleLock,
	          Properties::NON_VIRTUAL,
	          __bool__getAngleLock,
	          "Get whether the particle's angle is locked to the oscillation. ",
	          "");
	I_Method2(void, operate, IN, osgParticle::Particle *, P, IN, double, dt,
	          Properties::NON_VIRTUAL,
	          __void__operate__osgParticle_Particle_P1__double,
	          "Apply attraction to a particle. Do not call this method manually. ",
	          "");
	I_SimpleProperty(float, Amplitude, 
	                 __float__getAmplitude, 
	                 __void__setAmplitude__float);
	I_SimpleProperty(bool, AngleLock, 
	                 __bool__getAngleLock, 
	                 __void__setAngleLock__bool);
	I_SimpleProperty(float, Frequency, 
	                 __float__getFrequency, 
	                 __void__setFrequency__float);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(spin::SwitchableParticleSystem)
	I_DeclaringFile("particlesystemutil.h");
	I_Constructor0(____SwitchableParticleSystem,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const spin::SwitchableParticleSystem &, copy, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____SwitchableParticleSystem__C5_SwitchableParticleSystem_R1__C5_osg_CopyOp_R1,
	                           "",
	                           "");
	I_Method2(, META_Object, IN, spin, x, IN, spin::SwitchableParticleSystem, x,
	          Properties::NON_VIRTUAL,
	          ____META_Object__spin__SwitchableParticleSystem,
	          "",
	          "");
	I_Method1(osgParticle::Particle *, createParticle, IN, const osgParticle::Particle *, ptemplate,
	          Properties::VIRTUAL,
	          __osgParticle_Particle_P1__createParticle__C5_osgParticle_Particle_P1,
	          "",
	          "");
	I_Method1(void, reuseParticle, IN, int, i,
	          Properties::VIRTUAL,
	          __void__reuseParticle__int,
	          "",
	          "");
	I_Method1(void, drawImplementation, IN, osg::RenderInfo &, renderInfo,
	          Properties::VIRTUAL,
	          __void__drawImplementation__osg_RenderInfo_R1,
	          "",
	          "");
	I_Method1(void, setConnected, IN, bool, b,
	          Properties::NON_VIRTUAL,
	          __void__setConnected__bool,
	          "",
	          "");
	I_Method0(bool, getConnected,
	          Properties::NON_VIRTUAL,
	          __bool__getConnected,
	          "",
	          "");
	I_SimpleProperty(bool, Connected, 
	                 __bool__getConnected, 
	                 __void__setConnected__bool);
END_REFLECTOR

