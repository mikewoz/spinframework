// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <MeasurementNode.h>
#include <SceneManager.h>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(MeasurementNode)
	I_DeclaringFile("MeasurementNode.h");
	I_BaseType(ReferencedNode);
	I_Constructor2(IN, SceneManager *, sceneManager, IN, char *, initID,
	               ____MeasurementNode__SceneManager_P1__char_P1,
	               "",
	               "");
	I_Method0(void, callbackUpdate,
	          Properties::VIRTUAL,
	          __void__callbackUpdate,
	          "",
	          "For nodes that require regular programmatic control, there is a callback that is evaluated with every refresh. This function can thus be used for animations, or any other periodic updates.Note that changes to the scene graph structure (eg, moving/deleting nodes should NOT be done within this callback because traversals stacks will become corrupted. The technique is rather to enable a flag and then do the actual change in the SceneManager::updateGraph() method. ");
	I_Method1(void, setTarget, IN, const char *, targetID,
	          Properties::NON_VIRTUAL,
	          __void__setTarget__C5_char_P1,
	          "",
	          "");
	I_Method1(void, setReportingLevel, IN, int, level,
	          Properties::NON_VIRTUAL,
	          __void__setReportingLevel__int,
	          "",
	          "");
	I_Method0(const char *, getTarget,
	          Properties::NON_VIRTUAL,
	          __C5_char_P1__getTarget,
	          "",
	          "");
	I_Method0(int, getReportingLevel,
	          Properties::NON_VIRTUAL,
	          __int__getReportingLevel,
	          "",
	          "");
	I_Method0(std::vector< lo_message >, getState,
	          Properties::VIRTUAL,
	          __std_vectorT1_lo_message___getState,
	          "",
	          "For each subclass of ReferencedNode, we override the getState() method to fill the vector with the correct set of methods for this particular node ");
	I_SimpleProperty(int, ReportingLevel, 
	                 __int__getReportingLevel, 
	                 __void__setReportingLevel__int);
	I_SimpleProperty(std::vector< lo_message >, State, 
	                 __std_vectorT1_lo_message___getState, 
	                 0);
	I_SimpleProperty(const char *, Target, 
	                 __C5_char_P1__getTarget, 
	                 __void__setTarget__C5_char_P1);
END_REFLECTOR

