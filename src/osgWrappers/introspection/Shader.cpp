// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <cppintrospection/ReflectionMacros>
#include <cppintrospection/TypedMethodInfo>
#include <cppintrospection/StaticMethodInfo>
#include <cppintrospection/Attributes>

#include <SceneManager.h>
#include <Shader.h>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(spin::Shader)
	I_DeclaringFile("Shader.h");
	I_BaseType(spin::ReferencedStateSet);
	I_Constructor2(IN, spin::SceneManager *, sceneManager, IN, const char *, initID,
	               ____Shader__SceneManager_P1__C5_char_P1,
	               "",
	               "");
	I_Method0(void, updateCallback,
	          Properties::VIRTUAL,
	          __void__updateCallback,
	          "",
	          "This callback occurs every frame to update the state with any parameter changes. ");
	I_Method0(void, debug,
	          Properties::VIRTUAL,
	          __void__debug,
	          "",
	          "Print debug information to console. ");
	I_Method2(void, setUniform_Float, IN, const char *, name, IN, float, f,
	          Properties::NON_VIRTUAL,
	          __void__setUniform_Float__C5_char_P1__float,
	          "",
	          "");
	I_Method4(void, setUniform_Vec3, IN, const char *, name, IN, float, x, IN, float, y, IN, float, z,
	          Properties::NON_VIRTUAL,
	          __void__setUniform_Vec3__C5_char_P1__float__float__float,
	          "",
	          "");
	I_Method1(void, setPath, IN, const char *, newPath,
	          Properties::NON_VIRTUAL,
	          __void__setPath__C5_char_P1,
	          "",
	          "Creates a texture from a path on disk. ");
	I_Method0(const char *, getPath,
	          Properties::VIRTUAL,
	          __C5_char_P1__getPath,
	          "",
	          "Abstract method getPath needs to be implemented ");
	I_Method1(void, setLighting, IN, int, i,
	          Properties::NON_VIRTUAL,
	          __void__setLighting__int,
	          "",
	          "Set whether the texture is influenced by lighting ");
	I_Method0(int, getLighting,
	          Properties::NON_VIRTUAL,
	          __int__getLighting,
	          "",
	          "");
	I_Method1(void, setRenderBin, IN, int, i,
	          Properties::NON_VIRTUAL,
	          __void__setRenderBin__int,
	          "",
	          "Set the render bin for this texture. The higher the number, the later it gets processed (ie, it appears on top). Default renderBin = 11 ");
	I_Method0(int, getRenderBin,
	          Properties::NON_VIRTUAL,
	          __int__getRenderBin,
	          "",
	          "");
	I_Method0(std::vector< lo_message >, getState,
	          Properties::VIRTUAL,
	          __std_vectorT1_lo_message___getState,
	          "",
	          "Just like a ReferencedNode, each subclass of ReferencedStateSet must override the getState() method to pass it's current state. ");
	I_SimpleProperty(int, Lighting, 
	                 __int__getLighting, 
	                 __void__setLighting__int);
	I_SimpleProperty(const char *, Path, 
	                 __C5_char_P1__getPath, 
	                 __void__setPath__C5_char_P1);
	I_SimpleProperty(int, RenderBin, 
	                 __int__getRenderBin, 
	                 __void__setRenderBin__int);
	I_SimpleProperty(std::vector< lo_message >, State, 
	                 __std_vectorT1_lo_message___getState, 
	                 0);
END_REFLECTOR

