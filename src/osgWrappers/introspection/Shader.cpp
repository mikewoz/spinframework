// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <cppintrospection/ReflectionMacros>
#include <cppintrospection/TypedMethodInfo>
#include <cppintrospection/StaticMethodInfo>
#include <cppintrospection/Attributes>

#include <SceneManager.h>
#include <Shader.h>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(spin::Shader)
	I_DeclaringFile("Shader.h");
	I_BaseType(spin::ReferencedStateSet);
	I_Constructor2(IN, spin::SceneManager *, sceneManager, IN, const char *, initID,
	               ____Shader__SceneManager_P1__C5_char_P1,
	               "",
	               "");
	I_Method0(void, updateCallback,
	          Properties::VIRTUAL,
	          __void__updateCallback,
	          "",
	          "This callback occurs every frame to update the state with any parameter changes. ");
	I_Method0(void, debug,
	          Properties::VIRTUAL,
	          __void__debug,
	          "",
	          "Print debug information to console. ");
	I_Method0(void, printShaderSource,
	          Properties::NON_VIRTUAL,
	          __void__printShaderSource,
	          "",
	          "");
	I_Method0(void, clearUniforms,
	          Properties::NON_VIRTUAL,
	          __void__clearUniforms,
	          "",
	          "Remove all uniforms from this stateset ");
	I_Method2(void, registerUniform, IN, const char *, name, IN, const char *, type,
	          Properties::NON_VIRTUAL,
	          __void__registerUniform__C5_char_P1__C5_char_P1,
	          "",
	          "Create a uniform with the provided name and type. The value will be set to some default value ");
	I_Method3(void, registerUniform, IN, const char *, name, IN, const char *, type, IN, const char *, defaultValue,
	          Properties::NON_VIRTUAL,
	          __void__registerUniform__C5_char_P1__C5_char_P1__C5_char_P1,
	          "",
	          "Create a uniform with the provided name and type, and set the initial value for the uniform.Note that defaults are provided as strings in all cases. So in the case of several values, the defaultValue would be a space-separated list of values.It is also possible to specify an array of vectors. For example, if the type is vec2, you can specify a defaultValue of 0.0 0.1 1.0 1.0 and this will generate two vec2 uniforms with indexes automatically added to the name: uniform name[0] = vec2(0.0,0.1); uniform name[1] = vec2(1.0,1.0); To send OSC messages to control these uniforms, you need to use the full name including square brackets. For example: /SPIN/default/shader setUniform_vec2 name[0] 0.0 0.0 ");
	I_Method1(bool, loadJitterShader, IN, std::string, path,
	          Properties::NON_VIRTUAL,
	          __bool__loadJitterShader__std_string,
	          "",
	          "");
	I_Method1(void, loadGLSLShader, IN, std::string, path,
	          Properties::NON_VIRTUAL,
	          __void__loadGLSLShader__std_string,
	          "",
	          "");
	I_Method2(void, setUniform_bool, IN, const char *, name, IN, int, b,
	          Properties::NON_VIRTUAL,
	          __void__setUniform_bool__C5_char_P1__int,
	          "",
	          "");
	I_Method2(void, setUniform_int, IN, const char *, name, IN, int, b,
	          Properties::NON_VIRTUAL,
	          __void__setUniform_int__C5_char_P1__int,
	          "",
	          "");
	I_Method2(void, setUniform_float, IN, const char *, name, IN, float, f,
	          Properties::NON_VIRTUAL,
	          __void__setUniform_float__C5_char_P1__float,
	          "",
	          "");
	I_Method3(void, setUniform_vec2, IN, const char *, name, IN, float, x, IN, float, y,
	          Properties::NON_VIRTUAL,
	          __void__setUniform_vec2__C5_char_P1__float__float,
	          "",
	          "");
	I_Method4(void, setUniform_vec3, IN, const char *, name, IN, float, x, IN, float, y, IN, float, z,
	          Properties::NON_VIRTUAL,
	          __void__setUniform_vec3__C5_char_P1__float__float__float,
	          "",
	          "");
	I_Method5(void, setUniform_vec4, IN, const char *, name, IN, float, x, IN, float, y, IN, float, z, IN, float, w,
	          Properties::NON_VIRTUAL,
	          __void__setUniform_vec4__C5_char_P1__float__float__float__float,
	          "",
	          "");
	I_Method1(void, setShader, IN, const char *, path,
	          Properties::NON_VIRTUAL,
	          __void__setShader__C5_char_P1,
	          "",
	          "Creates a texture from a path on disk. ");
	I_Method0(const char *, getShader,
	          Properties::NON_VIRTUAL,
	          __C5_char_P1__getShader,
	          "",
	          "");
	I_Method0(std::vector< lo_message >, getState,
	          Properties::VIRTUAL,
	          __std_vectorT1_lo_message___getState,
	          "",
	          "Just like a ReferencedNode, each subclass of ReferencedStateSet must override the getState() method to pass it's current state. ");
	I_SimpleProperty(const char *, Shader, 
	                 __C5_char_P1__getShader, 
	                 __void__setShader__C5_char_P1);
	I_SimpleProperty(std::vector< lo_message >, State, 
	                 __std_vectorT1_lo_message___getState, 
	                 0);
END_REFLECTOR

