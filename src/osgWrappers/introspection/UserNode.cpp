// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <cppintrospection/ReflectionMacros>
#include <cppintrospection/TypedMethodInfo>
#include <cppintrospection/StaticMethodInfo>
#include <cppintrospection/Attributes>

#include <SceneManager.h>
#include <UserNode.h>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(spin::UserNode)
	I_DeclaringFile("UserNode.h");
	I_BaseType(spin::ConstraintsNode);
	I_Constructor2(IN, spin::SceneManager *, sceneManager, IN, char *, initID,
	               ____UserNode__SceneManager_P1__char_P1,
	               "",
	               "");
	I_Method0(void, callbackUpdate,
	          Properties::VIRTUAL,
	          __void__callbackUpdate,
	          "",
	          "The UserNode needs an update callback to check if ping messages are still being received. If not, the node and it's subgraph should be removed. ");
	I_Method0(void, updateNodePath,
	          Properties::VIRTUAL,
	          __void__updateNodePath,
	          "",
	          "The UserNode is used by OSG's NodeTrackerManipulator to position a camera for the user. However, NodeTrackerManipulator doesn't check if the nodepath has changed, so we override updateNodePath() and set an nodepathUpdate flag for the manipulator to see. ");
	I_Method1(void, setDescription, IN, const char *, s,
	          Properties::NON_VIRTUAL,
	          __void__setDescription__C5_char_P1,
	          "",
	          "");
	I_Method0(const char *, getDescription,
	          Properties::NON_VIRTUAL,
	          __C5_char_P1__getDescription,
	          "",
	          "");
	I_Method0(osg::Group *, getCameraAttachmentNode,
	          Properties::NON_VIRTUAL,
	          __osg_Group_P1__getCameraAttachmentNode,
	          "",
	          "This is where you attach cameras for the user.The standard ViewerManipulator for SPIN derives from OSG's NodeTrackerManipulator, which tracks (points to) the center of a subgraph's bounding sphere. We want to keep that bound empty so that we may effectively place the camera right at the UserNode's location. If we attach geometry under this, the camera will point at the center of that geometry instead. ");
	I_Method0(void, ping,
	          Properties::NON_VIRTUAL,
	          __void__ping,
	          "",
	          "");
	I_Method0(osg::Timer_t, getLastPing,
	          Properties::NON_VIRTUAL,
	          __osg_Timer_t__getLastPing,
	          "",
	          "");
	I_Method0(std::vector< lo_message >, getState,
	          Properties::VIRTUAL,
	          __std_vectorT1_lo_message___getState,
	          "",
	          "For each subclass of ReferencedNode, we override the getState() method to fill the vector with the correct set of methods for this particular node ");
	I_SimpleProperty(osg::Group *, CameraAttachmentNode, 
	                 __osg_Group_P1__getCameraAttachmentNode, 
	                 0);
	I_SimpleProperty(const char *, Description, 
	                 __C5_char_P1__getDescription, 
	                 __void__setDescription__C5_char_P1);
	I_SimpleProperty(osg::Timer_t, LastPing, 
	                 __osg_Timer_t__getLastPing, 
	                 0);
	I_SimpleProperty(std::vector< lo_message >, State, 
	                 __std_vectorT1_lo_message___getState, 
	                 0);
	I_PublicMemberProperty(bool, nodepathUpdate);
END_REFLECTOR

